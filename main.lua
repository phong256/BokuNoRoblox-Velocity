local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local lp = game.Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

-- H√†m th√¥ng b√°o
local function notify(title, content, duration)
    Rayfield:Notify({
        Title = title or "Th√¥ng B√°o",
        Content = content or "Kh√¥ng c√≥ n·ªôi dung",
        Duration = duration or 4,
    })
end

-- Ki·ªÉm tra nh√¢n v·∫≠t h·ª£p l·ªá
local function checkCharacter()
    return lp.Character and lp.Character:FindFirstChild("Humanoid") and lp.Character.Humanoid.Health > 0 and lp.Character:FindFirstChild("HumanoidRootPart")
end

-- Ki·ªÉm tra quirk (H·ªó tr·ª£ nhi·ªÅu quirk)
local function getQuirk()
    local supportedQuirks = {"DekuOFA", "Explosion", "Overhaul"} -- Th√™m c√°c quirk b·∫°n mu·ªën h·ªó tr·ª£
    for _, quirkName in pairs(supportedQuirks) do
        if lp.Character and lp.Character:FindFirstChild(quirkName) then
            return lp.Character:FindFirstChild(quirkName)
        end
    end
    return nil
end

-- T·∫°o c·ª≠a s·ªï GUI
local Window = Rayfield:CreateWindow({
    Name = "Boku No Roblox X GAMEDES",
    LoadingTitle = "ƒêang T·∫£i...",
    LoadingSubtitle = "By GAMEDES",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "BNHAAutoScript",
        FileName = "AutoFarmQuest"
    },
    KeySystem = false
})

-- Tab ch√≠nh
local MainTab = Window:CreateTab("‚öîÔ∏è Main")

-- Auto Farm (Criminal)
MainTab:CreateToggle({
    Name = "Auto Farm Criminal",
    CurrentValue = false,
    Callback = function(state)
        _G.AutoFarmCriminal = state
        task.spawn(function()
            while _G.AutoFarmCriminal do
                pcall(function()
                    if not checkCharacter() then
                        notify("‚ö†Ô∏è L·ªói", "Nh√¢n v·∫≠t ch∆∞a s·∫µn s√†ng!", 3)
                        repeat task.wait(0.5) until checkCharacter()
                        task.wait(1)
                    end

                    local quirk = getQuirk()
                    if not quirk then
                        notify("‚ö†Ô∏è L·ªói", "Y√™u c·∫ßu m·ªôt trong c√°c quirk: DekuOFA, Explosion, Overhaul!", 4)
                        _G.AutoFarmCriminal = false
                        return
                    end

                    local targets = {}
                    for _, v in pairs(workspace:GetDescendants()) do
                        if v:IsA("Model") and v.Name == "Criminal" and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                            if v.Humanoid.Health > 0 then
                                table.insert(targets, v)
                            end
                        end
                    end

                    for _, target in pairs(targets) do
                        if not _G.AutoFarmCriminal then break end
                        if not checkCharacter() then break end
                        notify("‚öîÔ∏è Auto Farm", "ƒêang t·∫•n c√¥ng: " .. target.Name, 2)

                        local hrp = lp.Character.HumanoidRootPart
                        local goalCFrame = target.HumanoidRootPart.CFrame * CFrame.new(0, 5, -3)

                        pcall(function()
                            local tween = TweenService:Create(hrp, TweenInfo.new(0.5, Enum.EasingStyle.Linear), {CFrame = goalCFrame})
                            tween:Play()
                            tween.Completed:Wait()
                        end)

                        if checkCharacter() and getQuirk() then
                            pcall(function()
                                local args = {CFrame.new(target.HumanoidRootPart.Position)}
                                quirk.E:FireServer(unpack(args))
                            end)
                        end
                        task.wait(0.5)
                    end
                end)
                task.wait(0.3)
            end
        end)
    end
})

-- Auto Farm (Weak Villain)
MainTab:CreateToggle({
    Name = "Auto Farm Weak Villain",
    CurrentValue = false,
    Callback = function(state)
        _G.AutoFarmWeakVillain = state
        task.spawn(function()
            while _G.AutoFarmWeakVillain do
                pcall(function()
                    if not checkCharacter() then
                        notify("‚ö†Ô∏è L·ªói", "Nh√¢n v·∫≠t ch∆∞a s·∫µn s√†ng!", 3)
                        repeat task.wait(0.5) until checkCharacter()
                        task.wait(1)
                    end

                    local quirk = getQuirk()
                    if not quirk then
                        notify("‚ö†Ô∏è L·ªói", "Y√™u c·∫ßu m·ªôt trong c√°c quirk: DekuOFA, Explosion, Overhaul!", 4)
                        _G.AutoFarmWeakVillain = false
                        return
                    end

                    local targets = {}
                    for _, v in pairs(workspace:GetDescendants()) do
                        if v:IsA("Model") and v.Name == "Weak Villain" and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                            if v.Humanoid.Health > 0 then
                                table.insert(targets, v)
                            end
                        end
                    end

                    for _, target in pairs(targets) do
                        if not _G.AutoFarmWeakVillain then break end
                        if not checkCharacter() then break end
                        notify("‚öîÔ∏è Auto Farm", "ƒêang t·∫•n c√¥ng: " .. target.Name, 2)

                        pcall(function()
                            local hrp = lp.Character.HumanoidRootPart
                            local goalCFrame = target.HumanoidRootPart.CFrame * CFrame.new(0, 5, -3)

                            local tween = TweenService:Create(hrp, TweenInfo.new(0.5, Enum.EasingStyle.Linear), {CFrame = goalCFrame})
                            tween:Play()
                            tween.Completed:Wait()

                            if checkCharacter() and getQuirk() then
                                local args = {CFrame.new(target.HumanoidRootPart.Position)}
                                quirk.E:FireServer(unpack(args))
                            end
                        end)
                        task.wait(0.5)
                    end
                end)
                task.wait(0.3)
            end
        end)
    end
})

-- Auto Farm High End 3
MainTab:CreateToggle({
    Name = "Auto Farm High End 3",
    CurrentValue = false,
    Callback = function(state)
        _G.AutoFarmMonsters = state
        notify("üìç L∆∞u √Ω", "H√£y ƒë·∫£m b·∫£o b·∫°n ƒëang ·ªü Ruined City ƒë·ªÉ farm High End 3!", 5)
        task.spawn(function()
            while _G.AutoFarmMonsters do
                pcall(function()
                    -- Ki·ªÉm tra nh√¢n v·∫≠t
                    if not checkCharacter() then
                        notify("‚ö†Ô∏è L·ªói", "Nh√¢n v·∫≠t ch∆∞a s·∫µn s√†ng! Script s·∫Ω d·ª´ng n·∫øu nh√¢n v·∫≠t ch·∫øt.", 3)
                        return
                    end

                    -- Ki·ªÉm tra quirk
                    local quirk = getQuirk()
                    if not quirk then
                        notify("‚ö†Ô∏è L·ªói", "Y√™u c·∫ßu m·ªôt trong c√°c quirk: DekuOFA, Explosion, Overhaul!", 4)
                        _G.AutoFarmMonsters = false
                        return
                    end

                    -- T√¨m High End 3
                    local monsterNames = {"High End 3"} -- Ch·ªâ t√¨m High End 3
                    local targets = {}
                    for _, v in pairs(workspace:GetDescendants()) do
                        if v:IsA("Model") and table.find(monsterNames, v.Name) and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                            if v.Humanoid.Health > 0 then
                                table.insert(targets, v)
                            end
                        end
                    end

                    -- Debug: In danh s√°ch NPC n·∫øu kh√¥ng t√¨m th·∫•y High End 3
                    if #targets == 0 then
                        notify("‚ö†Ô∏è Debug", "Kh√¥ng t√¨m th·∫•y High End 3! ƒê·∫£m b·∫£o b·∫°n ·ªü Ruined City.", 5)
                        local npcList = {}
                        for _, v in pairs(workspace:GetDescendants()) do
                            if v:IsA("Model") and v:FindFirstChild("Humanoid") then
                                table.insert(npcList, v.Name)
                            end
                        end
                        if #npcList > 0 then
                            notify("‚ö†Ô∏è Debug", "Danh s√°ch NPC trong workspace: " .. table.concat(npcList, ", "), 5)
                        else
                            notify("‚ö†Ô∏è Debug", "Kh√¥ng c√≥ NPC n√†o trong workspace!", 5)
                        end
                        task.wait(5)
                    end

                    -- T·∫•n c√¥ng t·ª´ng m·ª•c ti√™u
                    for _, target in pairs(targets) do
                        if not _G.AutoFarmMonsters then break end
                        if not checkCharacter() then break end
                        notify("‚öîÔ∏è Auto Farm High End 3", "ƒêang t·∫•n c√¥ng: " .. target.Name, 2)

                        -- C·∫≠p nh·∫≠t v·ªã tr√≠ li√™n t·ª•c ƒë·ªÉ tr√°nh m·ª•c ti√™u di chuy·ªÉn
                        local maxAttempts = 10
                        for i = 1, maxAttempts do
                            if not target.Parent or not target:FindFirstChild("HumanoidRootPart") or target.Humanoid.Health <= 0 then
                                break
                            end

                            pcall(function()
                                local hrp = lp.Character.HumanoidRootPart
                                local goalCFrame = target.HumanoidRootPart.CFrame * CFrame.new(0, 3, -2) -- ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch
                                local tween = TweenService:Create(hrp, TweenInfo.new(0.7, Enum.EasingStyle.Linear), {CFrame = goalCFrame})
                                tween:Play()
                                tween.Completed:Wait()

                                if checkCharacter() and getQuirk() then
                                    local success, err = pcall(function()
                                        local args = {CFrame.new(target.HumanoidRootPart.Position)}
                                        quirk.E:FireServer(unpack(args))
                                    end)
                                    if not success then
                                        notify("‚ö†Ô∏è Debug", "L·ªói khi g·ªçi skill E: " .. tostring(err), 3)
                                    end
                                end
                            end)
                            task.wait(1) -- TƒÉng th·ªùi gian ch·ªù ƒë·ªÉ tr√°nh anti-cheat
                        end
                    end
                end)
                task.wait(0.5)
            end
        end)
    end
})

-- Auto Farm Boss (Level 5000+)
MainTab:CreateToggle({
    Name = "Auto Farm Boss (Level 5000+)",
    CurrentValue = false,
    Callback = function(state)
        _G.AutoFarmBoss = state
        task.spawn(function()
            while _G.AutoFarmBoss do
                pcall(function()
                    if not checkCharacter() then
                        notify("‚ö†Ô∏è L·ªói", "Nh√¢n v·∫≠t ch∆∞a s·∫µn s√†ng!", 3)
                        repeat task.wait(0.5) until checkCharacter()
                        task.wait(1)
                    end

                    local quirk = getQuirk()
                    if not quirk then
                        notify("‚ö†Ô∏è L·ªói", "Y√™u c·∫ßu m·ªôt trong c√°c quirk: DekuOFA, Explosion, Overhaul!", 4)
                        _G.AutoFarmBoss = false
                        return
                    end

                    local bossNames = {"Overhaul", "Hawks", "All Might", "All For One", "Deku"}
                    local targets = {}
                    for _, v in pairs(workspace:GetDescendants()) do
                        if v:IsA("Model") and table.find(bossNames, v.Name) and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                            if v.Humanoid.Health > 0 then
                                table.insert(targets, v)
                            end
                        end
                    end

                    for _, target in pairs(targets) do
                        if not _G.AutoFarmBoss then break end
                        if not checkCharacter() then break end
                        notify("‚öîÔ∏è Auto Farm Boss", "ƒêang t·∫•n c√¥ng: " .. target.Name, 2)

                        pcall(function()
                            local hrp = lp.Character.HumanoidRootPart
                            local goalCFrame = target.HumanoidRootPart.CFrame * CFrame.new(0, 5, -5)

                            local tween = TweenService:Create(hrp, TweenInfo.new(0.7, Enum.EasingStyle.Linear), {CFrame = goalCFrame})
                            tween:Play()
                            tween.Completed:Wait()

                            if checkCharacter() and getQuirk() then
                                local args = {CFrame.new(target.HumanoidRootPart.Position)}
                                quirk.E:FireServer(unpack(args))
                            end
                        end)
                        task.wait(0.7)
                    end
                end)
                task.wait(0.5)
            end
        end)
    end
})

-- Auto Quest (Mirko - High End 3) (ƒê√£ s·ª≠a ƒë·ªÉ t·ª± ƒë·ªông nh·∫≠n l·∫°i quest)
MainTab:CreateToggle({
    Name = "Auto Quest (Mirko - High End 3)",
    CurrentValue = false,
    Callback = function(state)
        _G.AutoQuest = state
        local questName = "QUEST_MIRKO_1"

        local function startQuest()
            local success, result = pcall(function()
                local remotes = ReplicatedStorage:FindFirstChild("Questing")
                if not remotes then
                    notify("‚ö†Ô∏è L·ªói", "Kh√¥ng t√¨m th·∫•y Questing trong ReplicatedStorage!", 4)
                    return false
                end
                
                local networking = remotes:FindFirstChild("Networking")
                if not networking then
                    notify("‚ö†Ô∏è L·ªói", "Kh√¥ng t√¨m th·∫•y Networking!", 4)
                    return false
                end
                
                local questRemotes = networking:FindFirstChild("Remotes")
                if not questRemotes then
                    notify("‚ö†Ô∏è L·ªói", "Kh√¥ng t√¨m th·∫•y Remotes!", 4)
                    return false
                end
                
                local startQuestRemote = questRemotes:FindFirstChild("QUESTING_START_QUEST")
                if not startQuestRemote then
                    notify("‚ö†Ô∏è L·ªói", "Kh√¥ng t√¨m th·∫•y QUESTING_START_QUEST!", 4)
                    return false
                end
                
                local args = {questName}
                startQuestRemote:FireServer(unpack(args))
                return true
            end)
            
            if success and result then
                notify("üßæ Auto Quest", "B·∫Øt ƒë·∫ßu quest c·ªßa Mirko: ƒê√°nh b·∫°i 10-15 High End 3", 3)
                return true
            else
                notify("‚ö†Ô∏è L·ªói", "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu quest: " .. questName .. ". Ki·ªÉm tra t√™n quest!", 3)
                return false
            end
        end

        local function isQuestComplete()
            local success, result = pcall(function()
                local remotes = ReplicatedStorage:FindFirstChild("Questing")
                if not remotes then return false end
                
                local networking = remotes:FindFirstChild("Networking")
                if not networking then return false end
                
                local questRemotes = networking:FindFirstChild("Remotes")
                if not questRemotes then return false end
                
                local completeQuestRemote = questRemotes:FindFirstChild("QUESTING_IS_QUEST_COMPLETE")
                if not completeQuestRemote then return false end
                
                return completeQuestRemote:InvokeServer()
            end)
            return success and result
        end

        local function onRespawn()
            if _G.AutoQuest then
                task.wait(1)
                startQuest()
            end
        end

        if state then
            if _G.respawnConnection then
                _G.respawnConnection:Disconnect()
            end
            _G.respawnConnection = lp.CharacterAdded:Connect(onRespawn)
        else
            if _G.respawnConnection then
                _G.respawnConnection:Disconnect()
                _G.respawnConnection = nil
            end
        end

        if _G.AutoQuest then
            task.spawn(function()
                task.wait(1)
                startQuest()

                while _G.AutoQuest do
                    if isQuestComplete() then
                        notify("‚úÖ Quest", "Quest c·ªßa Mirko ho√†n th√†nh! Nh·∫≠n 500,000 EXP v√† $7,500 Cash. T·ª± ƒë·ªông nh·∫≠n l·∫°i quest.", 3)
                        task.wait(1) -- Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o quest ƒë∆∞·ª£c ho√†n th√†nh
                        startQuest() -- T·ª± ƒë·ªông nh·∫≠n l·∫°i quest ngay l·∫≠p t·ª©c
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

-- Tab Settings
local SettingsTab = Window:CreateTab("‚öôÔ∏è Settings")

SettingsTab:CreateButton({
    Name = "üîÑ Rejoin Server Ng·∫´u Nhi√™n",
    Callback = function()
        notify("üîÑ Rejoin", "ƒêang t√¨m server m·ªõi...", 3)
        task.spawn(function()
            task.wait(1)
            local success, response = pcall(function()
                return HttpService:JSONDecode(game:HttpGet(
                    "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
                ))
            end)

            if success and response and response.data then
                local validServers = {}
                for _, server in ipairs(response.data) do
                    if server.playing < server.maxPlayers and server.id ~= game.JobId then
                        table.insert(validServers, server)
                    end
                end
                
                if #validServers > 0 then
                    local randomServer = validServers[math.random(1, #validServers)]
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer.id, lp)
                    return
                else
                    notify("‚ùå L·ªói", "Kh√¥ng t√¨m th·∫•y server ph√π h·ª£p!", 4)
                end
            else
                notify("‚ö†Ô∏è L·ªói", "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch server!", 4)
            end
        end)
    end
})
